* Dynamic Matrix Project

This project implements a dynamic matrix structure in C++ with support for 3D vector operations. It provides a flexible and efficient way to work with matrices of varying sizes, along with comprehensive unit tests to ensure reliability.

** Features
- Dynamic allocation and deallocation of matrix memory
- Support for 3D vector operations within the matrix
- Matrix arithmetic operations (addition, subtraction, multiplication)
- Row and column manipulation (insertion, deletion)
- Submatrix insertion
- File I/O operations for saving and loading matrices
- Move semantics for efficient resource management
- Comprehensive unit tests using Catch framework

** Navigation
- [[#building][Building]]
  - [[#with-nix][With Nix]]
  - [[#manually][Manually]]
- [[#usage][Usage]]

** Building

*** With Nix

For Nix users, building and running the project is straightforward:

#+begin_src shell
nix run github:seajoyer/Dynamic_matrix --impure
#+end_src

You can also start an isolated development shell with all dependencies by running:

#+begin_src shell
nix develop github:seajoyer/Dynamic_matrix
#+end_src

*** Manually

**** Prerequisites

Ensure you have the following dependencies installed:

- [[https://gcc.gnu.org/][g++]] compiler (with C++11 support)
- [[https://www.gnu.org/software/make/][GNU Make]]
- [[https://github.com/catchorg/Catch2][Catch2]] (for testing)

**** Building

1. Clone the repository:
   #+begin_src shell
   git clone https://github.com/seajoyer/Dynamic_matrix
   cd Dynamic_matrix
   #+end_src

2. Build the project:

   ~make test~ to build & run tests

   ~make clean~ to clean the ~build~ directory

   ~make help~ to see a help message

** Usage

To use the DynamicMatrix class in your own projects:

1. Include the necessary headers:
   #+begin_src cpp
   #include "dynamic_matrix.h"
   #include "vector3d_structure.h"
   #+end_src

2. Create and manipulate matrices:
   #+begin_src cpp
   DynamicMatrix matrix(3, 3);
   matrix.at(0, 0) = Vector3D(1, 2, 3);
   matrix.at(1, 1) = Vector3D(4, 5, 6);

   DynamicMatrix result = matrix * 2;
   result.print();

   // Use move semantics for efficient transfers
   DynamicMatrix moved_matrix = std::move(result);
   #+end_src

3. File I/O operations

   Save a matrix to a file:
   #+begin_src cpp
   matrix.saveToFile("matrix.bin");
   #+end_src

   Load a matrix from a file:
   #+begin_src cpp
   DynamicMatrix loaded_matrix = DynamicMatrix::loadFromFile("matrix.bin");
   #+end_src

   For more detailed examples, refer to the test cases in `tests/dynamic_matrix_tests.cpp`.
