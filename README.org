* Interpolation Project

This project implements Lagrange Interpolation in C++, providing both uniform and Chebyshev node distributions. It includes functionality for interpolating single points and ranges, as well as plotting capabilities using gnuplot.

** Features

- Lagrange Interpolation implementation
- Support for uniform and Chebyshev node distributions
- Single point and range interpolation
- Plotting functionality using gnuplot
- Nix flake for reproducible builds and development environment

** Navigation

- [[#building-and-running][Building and Running]]
  - [[#with-nix][With Nix]]
  - [[#manually][Manually]]
- [[#usage][Usage]]
- [[#project-structure][Project Structure]]
- [[#dependencies][Dependencies]]

** Building and Running

*** With Nix

For Nix users, building and running the project is straightforward:

#+begin_src shell
# Build the project
nix build

# Run the project (this will generate and display plots)
nix run
#+end_src

You can also start an isolated development shell with all the dependencies:

#+begin_src shell
nix develop
#+end_src

*** Manually

**** Prerequisites

Ensure you have the following dependencies installed:

- C++ compiler (g++ or clang++)
- Make build system
- gnuplot (for plotting)
- Boost library

**** Building & Running

1. Clone the repository:
   #+begin_src shell
   git clone [repository-url]
   cd [repository-name]
   #+end_src

2. Build the project:
   #+begin_src shell
   make
   #+end_src

3. Run the project:
   #+begin_src shell
   make run
   #+end_src

4. Clean the build directory:
   #+begin_src shell
   make clean
   #+end_src

** Usage

The main program demonstrates Lagrange Interpolation with both uniform and Chebyshev nodes. When you run the program, it will:

1. Generate interpolation nodes
2. Perform interpolation
3. Create plot data
4. Generate gnuplot scripts
5. Display the resulting plots

The plots will show:
- Original function
- Interpolation nodes
- Interpolated function

You can modify the interpolation parameters (such as the number of nodes or the function being interpolated) by editing the `main.cpp` file.

** Project Structure

- `cpp/`
  - `include/`
    - `lagrange_interpolation.h`
    - `plotting.h`
  - `src/`
    - `lagrange_interpolation.cpp`
    - `plotting.cpp`
  - `main.cpp`
  - `Makefile`
- `flake.nix`
- `flake.lock`

** Dependencies

- C++20 compatible compiler
- Make
- gnuplot
- Boost library

For Nix users, all dependencies are managed through the flake.nix file.

** Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

** License

[Specify your license here]
